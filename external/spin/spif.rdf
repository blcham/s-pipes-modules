<?xml version="1.0"?>
<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:spin="http://spinrdf.org/spin#"
    xmlns:sp="http://spinrdf.org/sp#"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:arg="http://spinrdf.org/arg#"
    xmlns:spif="http://spinrdf.org/spif#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:spl="http://spinrdf.org/spl#"
  xml:base="http://spinrdf.org/spif">
  <spin:LibraryOntology rdf:about="">
    <owl:imports rdf:resource="http://spinrdf.org/spl"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A library of "generally useful" SPARQL functions defined using SPIN. This library consists of functions that are impossible or difficult to express in terms of other functions, but rather will require a native implementation in languages like Java. In contrast, the SPL (http://spinrdf.org/spl#) namespace is reserved for functions that can be expressed entirely in terms of other SPARQL expressions and standard built-ins.</rdfs:comment>
    <owl:imports rdf:resource="http://spinrdf.org/spin"/>
    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >0.2.0</owl:versionInfo>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Ontology"/>
  </spin:LibraryOntology>
  <rdf:Property rdf:about="http://spinrdf.org/arg#pattern">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >pattern</rdfs:label>
    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>
  </rdf:Property>
  <rdf:Property rdf:about="http://spinrdf.org/arg#datatype">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >datatype</rdfs:label>
    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>
  </rdf:Property>
  <spin:Function rdf:ID="buildUniqueURI">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A variation of smf:buildURI that also makes sure that the created URI is unique in the current graph (that is, no triple contains the URI as either subject, predicate or object). This function is particularly useful for ontology mapping from a legacy data source into an RDF model.</rdfs:comment>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The URI template such as "&lt;http://my.com/Instance-{?index}&gt;". If the template contains a full URI, then it must be wrapped by &lt;...&gt;, otherwise the system will treat it as a qname.</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#URIFunctions"/>
    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >build unique URI</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="invoke">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Calls another SPARQL function specified by a URI resource (?arg1), with additional arguments passed into from ?arg2 onwards. This can be used to dynamically call functions, the URI of which is now known statically. The result of the function call will be passed on as result of the invoke call.

The function can also be a binary built-in SPARQL function using the SPIN function identifiers from the SPL ontology. For example, sp:gt will be executed as ?left &gt; ?right.</rdfs:comment>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://spinrdf.org/spin#Function"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The URI resource defining the function to call.</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >invoke</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#MiscFunctions"/>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The first argument of the function call.</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The second argument of the function call.</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg4"/>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The third argument of the function call.</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg5"/>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The forth argument of the function call.</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
  </spin:Function>
  <spl:TestCase rdf:ID="Test-parseDate-yyyyMMdd">
    <spl:testExpression>
      <spif:parseDate>
        <arg:pattern>yyyyMMdd</arg:pattern>
        <sp:arg1>20080213</sp:arg1>
      </spif:parseDate>
    </spl:testExpression>
    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#date"
    >2008-02-13</spl:testResult>
  </spl:TestCase>
  <spin:Function rdf:ID="cast">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Creates a new literal from an existing literal, but with a different datatype. This can, for example, be used to convert between floating point values and int values.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#MiscFunctions"/>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the "old" literal that shall be converted</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >cast</rdfs:label>
    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/arg#datatype"/>
        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The target datatype, e.g. xsd:integer. Leave blank for untyped literals.</rdfs:comment>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
      </spl:Argument>
    </spin:constraint>
  </spin:Function>
  <spin:Function rdf:ID="replaceAll">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Does a string replacement based on the Java function String.replaceAll().</rdfs:comment>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The replacement string.</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The regular expression to search for.</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The string to operate on.</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >replace all</rdfs:label>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </spin:Function>
  <spin:Function rdf:ID="camelCase">
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the input string</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The match expression</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <rdfs:comment>Converts an input string into camel case. 
For example, "semantic web" becomes "SemanticWeb".
An optional matching expression can be given to only convert the matched characters.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >camel case</rdfs:label>
  </spin:Function>
  <spl:TestCase rdf:ID="Test-parseDate-dd.MM.yyyy">
    <spl:testExpression>
      <spif:parseDate>
        <arg:pattern>dd.MM.yyyy</arg:pattern>
        <sp:arg1>13.02.2008</sp:arg1>
      </spif:parseDate>
    </spl:testExpression>
    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#date"
    >2008-02-13</spl:testResult>
  </spl:TestCase>
  <spin:Function rdf:ID="buildString">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Constructs a new string by inserting the existing variable bindings into a template. The template can mention variable names in curly braces, such as "Hello {?index}" would create "Hello 42" is ?index has the value 42. As an alternative to variable names, the function can take additional arguments after the template, the variables of which can be accessed using {?1}, {?2} etc. For example: smf:buildString("Hello-{?1}-{?2}", ?day, ?month) would insert day and month at places {?1} and {?2}.</rdfs:comment>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the template string</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >build string</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="hasAllObjects">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Checks whether a given subject/predicate combination has all values enumerated from a given rdf:List. In other words, for each member ?object of the rdf:List, the triple (?arg1, ?arg2, ?object) must be in the model to return true. If the list is empty, true will also be returned.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#BooleanFunctions"/>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the match subject</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >an rdf:List containing the match objects</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the match predicate</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >has all objects</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="lastIndexOf">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Gets the index of the last occurrence of a certain substring in a given search string. Returns an error if the substring is not found.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The optional index to start with.</rdfs:comment>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>
      </spl:Argument>
    </spin:constraint>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the sub string to search for</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the string to search in</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >last index of</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="random">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Creates a random xsd:double between 0 and 1.</rdfs:comment>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#double"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >random</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#MathematicalFunctions"/>
  </spin:Function>
  <spin:Function rdf:ID="lowerTitleCase">
    <rdfs:comment>Converts an input string into lower title case. 
For example, "semantic web" becomes "semantic Web".
An optional matching expression can be given to only convert the matched characters.</rdfs:comment>
    <spin:constraint>
      <spl:Argument>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The match expression</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the input string</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >lower title case</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="name">
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <rdfs:comment>Gets a human-readable string representation from an RDF node. If it's a literal, the function will return the literal's lexical text. If it's a resource the system will use the rdfs:label (if exists) or otherwise use the qname.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >name</rdfs:label>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the node (literal or resource) that shall be rendered into a string</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </spin:Function>
  <spl:TestCase rdf:ID="Test-mod-1">
    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"
    >1</spl:testResult>
    <spl:testExpression>
      <spif:mod>
        <sp:arg2 rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"
        >2</sp:arg2>
        <sp:arg1 rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"
        >3</sp:arg1>
      </spif:mod>
    </spl:testExpression>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Test-mod-1</rdfs:label>
  </spl:TestCase>
  <spl:TestCase rdf:ID="Test-parseDate-MM_dd_yyyy">
    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#date"
    >2008-02-13</spl:testResult>
    <spl:testExpression>
      <spif:parseDate>
        <arg:pattern>MM/dd/yyyy</arg:pattern>
        <sp:arg1>2/13/2008</sp:arg1>
      </spif:parseDate>
    </spl:testExpression>
  </spl:TestCase>
  <spin:Function rdf:ID="canInvoke">
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The first argument of the function call.</rdfs:comment>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The third argument of the function call.</rdfs:comment>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg4"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The function to check.</rdfs:comment>
        <spl:valueType rdf:resource="http://spinrdf.org/spin#Function"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The second argument of the function call.</rdfs:comment>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Checks whether a given SPIN function (?arg1) can be invoked with a given list of argument (?arg2, ?arg3, ...) without violating any of its declared SPIN constraints. In addition to the usual argument declarations, the SPIN function may declare ASK and CONSTRUCT queries to check additional pre-conditions.</rdfs:comment>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#MiscFunctions"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >can invoke</rdfs:label>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The forth argument of the function call.</rdfs:comment>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg5"/>
      </spl:Argument>
    </spin:constraint>
  </spin:Function>
  <spin:MagicProperty rdf:ID="split">
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#MagicProperties"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >split</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Splits a given sting and iterates over all sub-strings. An unbound variable must be placed on the left side of this magic property. A list with two members must be on the right. The first is the string to split, and the second is a regular expression.

For example, ?str spif:split ("Hello World", " ") will bind ?str to "Hello" and "World".</rdfs:comment>
  </spin:MagicProperty>
  <spin:Function rdf:ID="convertSPINRDFToString">
    <spin:constraint>
      <spl:Argument>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >true to embed HTML markup into the output</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#MiscFunctions"/>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the root of the SPIN RDF query</rdfs:comment>
        <spl:valueType rdf:resource="http://spinrdf.org/sp#Query"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Converts a SPARQL query encoded in SPIN RDF format to a SPARQL string in textual form. The SPIN query must be well-formed in the context graph at execution time, and the provided argument must be the root of the expression (e.g., an instance of sp:Select).

This function is available as part of the TopBraid SPIN Libraries.</rdfs:comment>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >convert SPIN RDF to string</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="titleCase">
    <rdfs:comment>Converts an input string to title case.
For example, "germany" becomes "Germany".
An optional matching expression can be given to only convert the matched characters.</rdfs:comment>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The input string</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The match expression</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
      </spl:Argument>
    </spin:constraint>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >title case</rdfs:label>
  </spin:Function>
  <spin:MagicProperty rdf:ID="for">
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#MagicProperties"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >for</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Can be used to iterate over a range of (integer) numbers similar to a for loop in iterative programming languages. An unbound variable must be placed on the left side of this magic property. On the right side, a list of two numbers needs to be placed.

For example, ?index spif:for (1 10) binds ?index to all xsd:integers &gt;= 1 and &lt;= 10.</rdfs:comment>
  </spin:MagicProperty>
  <spin:Function rdf:ID="currentTimeMillis">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Returns the current time in milliseconds. See System.currentTimeMillis() in Java.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#MiscFunctions"/>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#long"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >current time millis</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="lowerCamelCase">
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <rdfs:comment>Converts an input string into lower camel case.
For example, "semantic web" becomes "semanticWeb".
An optional matching expression can be given to only convert the matched characters.</rdfs:comment>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the input string</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The match expression</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
      </spl:Argument>
    </spin:constraint>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >lower camel case</rdfs:label>
  </spin:Function>
  <spin:MagicProperty rdf:ID="foreach">
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#MagicProperties"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Can be used to "iterate" over a list of RDF nodes given as members of a list on the right. An unbound variable must be on the left side of the magic property. On the right side, a list of nodes with arbitrary length can be placed.

For example, ?subject spif:foreach (owl:Thing owl:Nothing) will bind ?subject to owl:Thing and then owl:Nothing.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >for each</rdfs:label>
  </spin:MagicProperty>
  <spin:Function rdf:ID="buildStringFromRDFList">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Builds a string from the members of a given rdf:List (?arg1). The function iterates over all members of the list (which must be well-formed according to the RDF syntax rules). For each member, a string template (?arg2) is applied where the expression {?member} will be substituted with the current member. Optionally, a separator (?arg3) can be inserted between the list members in the result string, e.g. to insert a comma.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the head of the rdf:List to convert to string</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the template string</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
      </spl:Argument>
    </spin:constraint>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <spin:constraint>
      <spl:Argument>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the separator to insert between each string</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >build string from RDF list</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="lowerCase">
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <rdfs:comment>Converts an input string into lower case. 
For example, "SEMANTIC Web" becomes "semantic web".
An optional matching expression can be given to only convert the matched characters.</rdfs:comment>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the input string</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The match expression</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
      </spl:Argument>
    </spin:constraint>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >lower case</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="countMatches">
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the predicate in the match triple, or an unbound variable for a wildcard</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the object in the match triple, or an unbound variable for a wildcard</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the subject in the match triple, or an unbound variable for a wildcard</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Counts all occurrences of a triple pattern based on subject (?arg1), predicate (?arg2) and object (?arg3) input. Any of those can be unbound variables.

This function is available as part of the TopBraid SPIN Libraries.</rdfs:comment>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#MiscFunctions"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >count matches</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="upperCase">
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The input string</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The match expression</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
      </spl:Argument>
    </spin:constraint>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <rdfs:comment>Converts an input string into upper case. 
For example, "semantic web" becomes "SEMANTIC WEB".
An optional matching expression can be given to only convert the matched characters.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >upper case</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="trim">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Creates a new string value by trimming an input string. Leading and trailing whitespaces are deleted.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >trim</rdfs:label>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the text to trim</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </spin:Function>
  <spl:TestCase rdf:ID="Test-parseDate-yyyyMMddhhmm">
    <spl:testExpression>
      <spif:parseDate>
        <arg:pattern>yyyyMMddhhmm</arg:pattern>
        <sp:arg1>200802131830</sp:arg1>
      </spif:parseDate>
    </spl:testExpression>
    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime"
    >2008-02-13T18:30:00</spl:testResult>
  </spl:TestCase>
  <spin:Function rdf:ID="encodeURL">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Encodes a URL string, for example so that it can be passed as an argument to REST services.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >encode URL</rdfs:label>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The URL to encode.</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The (optional) encoding. Defaults to UTF-8.</rdfs:comment>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:defaultValue rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >UTF-8</spl:defaultValue>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
  </spin:Function>
  <spin:Function rdf:ID="generateUUID">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Generates a new unique ID as a string literal. This is often useful for creating "random" URIs and other identifiers.</rdfs:comment>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#MiscFunctions"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >generate UUID</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="buildURI">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Constructs a new URI resource by inserting the existing variable bindings into a template. The template can mention variable names in curly braces, such as "my:Instance-{?index}" would create "my:Instance-42" is ?index has the value 42. As an alternative to variable names, the function can take additional arguments after the template, the variables of which can be accessed using {?1}, {?2} etc. For example: smf:buildURI("my:Instance-{?1}-{?2}", ?day, ?month) would insert day and month at places {?1} and {?2}.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#URIFunctions"/>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The URI template such as "&lt;http://my.com/Instance-{?index}&gt;". If the template contains a full URI, then it must be wrapped by &lt;...&gt;, otherwise the system will treat it as a qname.</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >build URI</rdfs:label>
  </spin:Function>
  <spl:TestCase rdf:ID="Test-parseDate-MMMMMMMMM_dd_yyyy">
    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#date"
    >2008-02-13</spl:testResult>
    <spl:testExpression>
      <spif:parseDate>
        <arg:pattern>MMMMMMMMM dd yyyy</arg:pattern>
        <sp:arg1>February 13 2008</sp:arg1>
      </spif:parseDate>
    </spl:testExpression>
  </spl:TestCase>
  <spin:Function rdf:ID="regex">
    <rdfs:comment>An input string is converted into a result string by applying a match and replacement expressions.
For example, the input string "semantic web" with the match expression "([A-z]+) ([A-z]+)" and the replacement expression "The $1 life" returns the string "The semantic life".
An optional input string is returned, if no match occurs. If this string is empty and no match occurs, then the result string is unbound.</rdfs:comment>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the input string</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The replacement expression</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >regex</rdfs:label>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The match expression</rdfs:comment>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg4"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The optional string returned as result string if no match occurs. If this string is empty and no match occurs, then the result string is unbound.</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
  </spin:Function>
  <spin:Function rdf:ID="indexOf">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Gets the index of the first occurrence of a certain substring in a given search string. Returns an error if the substring is not found.</rdfs:comment>
    <spin:constraint>
      <spl:Argument>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the sub string to search for</rdfs:comment>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >the string to search in</rdfs:comment>
      </spl:Argument>
    </spin:constraint>
    <spin:constraint>
      <spl:Argument>
        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >The optional index to start with.</rdfs:comment>
        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"
        >true</spl:optional>
        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>
      </spl:Argument>
    </spin:constraint>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#StringFunctions"/>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >index of</rdfs:label>
  </spin:Function>
  <spl:TestCase rdf:ID="Test-parseDate-MMMMMMMMM_dd__yyyy">
    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#date"
    >2008-02-13</spl:testResult>
    <spl:testExpression>
      <spif:parseDate>
        <arg:pattern>MMMMMMMMM dd, yyyy</arg:pattern>
        <sp:arg1>February 13, 2008</sp:arg1>
      </spif:parseDate>
    </spl:testExpression>
  </spl:TestCase>
  <spl:TestCase rdf:ID="Test-parseDate-dd_MM_yyyy">
    <spl:testExpression>
      <spif:parseDate>
        <arg:pattern>dd/MM/yyyy</arg:pattern>
        <sp:arg1>13/2/2008</sp:arg1>
      </spif:parseDate>
    </spl:testExpression>
    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#date"
    >2008-02-13</spl:testResult>
  </spl:TestCase>
  <spl:TestCase rdf:ID="Test-parseDate-hhmm">
    <spl:testExpression>
      <spif:parseDate>
        <arg:pattern>hhmm</arg:pattern>
        <sp:arg1>1830</sp:arg1>
      </spif:parseDate>
    </spl:testExpression>
    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#time"
    >18:30:00</spl:testResult>
  </spl:TestCase>
  <spl:Argument rdf:nodeID="A0">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >the input text</rdfs:comment>
    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </spl:Argument>
  <spl:Argument rdf:nodeID="A1">
    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The second argument.</rdfs:comment>
    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>
  </spl:Argument>
  <spl:Argument rdf:nodeID="A2">
    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The first operand.</rdfs:comment>
    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>
  </spl:Argument>
  <spl:Argument rdf:nodeID="A3">
    <spl:predicate rdf:resource="http://spinrdf.org/arg#pattern"/>
    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The template of the input string. This must conform to the pattern language implemented by the Java SimpleDateFormat class (http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html).</rdfs:comment>
  </spl:Argument>
  <spin:Function rdf:ID="parseDate">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Converts a string in a semi-structured format into a xsd:date, xsd:dateTime or xsd:time literal. The input string must be in a given template format, e.g. "yyyy.MM.dd G 'at' HH:mm:ss z" for strings such as 2001.07.04 AD at 12:08:56 PDT.</rdfs:comment>
    <spin:constraint rdf:nodeID="A0"/>
    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    <spin:constraint rdf:nodeID="A3"/>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#DateFunctions"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >parse date</rdfs:label>
  </spin:Function>
  <spin:Function rdf:ID="mod">
    <spin:constraint rdf:nodeID="A1"/>
    <spin:constraint rdf:nodeID="A2"/>
    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The mathematical modulo operator, aka % in Java.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >mod</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spl#MathematicalFunctions"/>
  </spin:Function>
</rdf:RDF>

<!-- Created with TopBraid -->
